{
	"name": "orth",
	"scopeName": "source.orth",
	"fileTypes": [
		".orth"
	],
	"foldingStartMarker": "\\bconst|while|proc|mem\\s",
	"foldingStopMarker": "\\bend|else\\s",
	"patterns": [
		{
			"name": "meta.const.orth",
			"comment": "",
			"begin": "(const)\\s([^\\s]*)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.const.orth"
				},
				"2": {
					"name": "variable.entity.name.const.orth"
				}
			},
			"end": "\\s(end)",
			"endCaptures": {
				"1": {
					"name": "keyword.end.const.orth"
				}
			},
			"patterns": [
				{
					"comment": "limited const math operators",
					"name": "keyword.operator.math.const.orth",
					"match": "\\s([+*\\-])\\s"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#numbers"
				},
				{
					"include": "#variables"
				}
			]
		},
		{
			"include": "#comments"
		},
		{
			"include": "#procs"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#constants"
		}
	],
	"repository": {
		"constants": {
			"patterns": [
				{
					"comment": "booleans",
					"name": "constant.language.bool.orth",
					"match": "\\b(true|false)\\b"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"comment": "control flow keywords",
					"name": "keyword.control.orth",
					"match": "\\b(else|if|return|while)\\b"
				},
				{
					"comment": "comparison operators",
					"name": "keyword.operator.comparison.orth",
					"match": "\\b(=(=)?(?!>)|!=|<=|(?<!=)>=)\\b"
				},
				{
					"comment": "math operators",
					"name": "keyword.operator.math.orth",
					"match": "\\b([+*\\-\\divmod])\\b"
				},
				{
					"comment": "store",
					"name": "keyword.operator.store.orth",
					"match": "\\b(![8|16|32|64])\\b"
				},
				{
					"comment": "load",
					"name": "keyword.operator.store.orth",
					"match": "\\b(@[8|16|32|64])\\b"
				},
				{
					"comment": "operators",
					"name": "keyword.operator.orth",
					"match": "\\b(drop|dup|over|rotate|argv|argc|shl|shr|bor|band|swap|syscall1|syscall2|syscall3|syscall4|syscall5|syscall6)\\b"
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"comment": "variables",
					"name": "variable.other.orth",
					"match": "([^\\s]*)"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.double.orth",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.orth",
							"match": "\\\\[\"\\\\]"
						}
					]
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.decimal.orth",
					"match": "([0-9]+)"
				}
			]
		},
		"procs": {
			"patterns": [
				{
					"name": "meta.function.definition.orth",
					"comment": "",
					"begin": "(proc)\\s([^\\s]*)\\s+",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.function.orth"
						},
						"2": {
							"name": "entity.name.function.orth"
						}
					},
					"end": "\\s(end)",
					"endCaptures": {
						"0": {
							"name": "keyword.control.function.orth"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#keywords"
						},
						{
							"include": "#strings"
						},
						{
							"include": "#numbers"
						},
						{
							"include": "#variables"
						},
						{
							"include": "#constants"
						}
					]
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"comment": "line comments",
					"name": "comment.line.double-slash.orth",
					"match": "\\s*//.*"
				}
			]
		}
	}
}